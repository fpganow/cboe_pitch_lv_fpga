$date
	Fri Oct  6 19:06:19 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module axi_to_uart_S00_tb $end
$var wire 1 ! uart_rxd $end
$var wire 1 " uart_txd $end
$var wire 1 # uart_clk_edge $end
$var wire 3 $ o_SM_Main [2:0] $end
$var wire 1 % dbg_uart_writing $end
$var wire 1 & dbg_uart_write_finished $end
$var wire 1 ' dbg_uart_write_en $end
$var wire 8 ( dbg_uart_write_data [7:0] $end
$var wire 8 ) dbg_uart_write_count [7:0] $end
$var wire 1 * dbg_o_tx_serial $end
$var wire 1 + dbg_o_tx_done $end
$var wire 1 , dbg_o_tx_active $end
$var wire 1 - axi_wready $end
$var wire 1 . axi_rvalid $end
$var wire 2 / axi_rresp [1:0] $end
$var wire 32 0 axi_rdata [31:0] $end
$var wire 1 1 axi_bvalid $end
$var wire 2 2 axi_bresp [1:0] $end
$var wire 1 3 axi_awready $end
$var wire 1 4 axi_arready $end
$var reg 6 5 axi_araddr [5:0] $end
$var reg 1 6 axi_aresetn $end
$var reg 3 7 axi_arprot [2:0] $end
$var reg 1 8 axi_arvalid $end
$var reg 6 9 axi_awaddr [5:0] $end
$var reg 3 : axi_awprot [2:0] $end
$var reg 1 ; axi_awvalid $end
$var reg 1 < axi_bready $end
$var reg 1 = axi_rready $end
$var reg 32 > axi_wdata [31:0] $end
$var reg 4 ? axi_wstrb [3:0] $end
$var reg 1 @ axi_wvalid $end
$var reg 1 A clk $end
$scope module axi_uart_to_S00_dut $end
$var wire 1 A S_AXI_ACLK $end
$var wire 6 B S_AXI_ARADDR [5:0] $end
$var wire 1 6 S_AXI_ARESETN $end
$var wire 3 C S_AXI_ARPROT [2:0] $end
$var wire 1 4 S_AXI_ARREADY $end
$var wire 1 8 S_AXI_ARVALID $end
$var wire 6 D S_AXI_AWADDR [5:0] $end
$var wire 3 E S_AXI_AWPROT [2:0] $end
$var wire 1 3 S_AXI_AWREADY $end
$var wire 1 ; S_AXI_AWVALID $end
$var wire 1 < S_AXI_BREADY $end
$var wire 2 F S_AXI_BRESP [1:0] $end
$var wire 1 1 S_AXI_BVALID $end
$var wire 32 G S_AXI_RDATA [31:0] $end
$var wire 1 = S_AXI_RREADY $end
$var wire 2 H S_AXI_RRESP [1:0] $end
$var wire 1 . S_AXI_RVALID $end
$var wire 32 I S_AXI_WDATA [31:0] $end
$var wire 1 - S_AXI_WREADY $end
$var wire 4 J S_AXI_WSTRB [3:0] $end
$var wire 1 @ S_AXI_WVALID $end
$var wire 1 , dbg_o_tx_active $end
$var wire 1 + dbg_o_tx_done $end
$var wire 1 * dbg_o_tx_serial $end
$var wire 8 K dbg_uart_read_data [7:0] $end
$var wire 1 L dbg_uart_read_en $end
$var wire 1 M dbg_uart_read_finished $end
$var wire 1 N dbg_uart_reading $end
$var wire 8 O dbg_uart_write_count [7:0] $end
$var wire 8 P dbg_uart_write_data [7:0] $end
$var wire 1 ' dbg_uart_write_en $end
$var wire 1 & dbg_uart_write_finished $end
$var wire 1 % dbg_uart_writing $end
$var wire 1 Q slv_reg_rden $end
$var wire 1 R slv_reg_wren $end
$var wire 1 ! uart_rxd $end
$var wire 1 " uart_txd $end
$var wire 1 # uart_clk_edge $end
$var wire 1 S o_Tx_Serial $end
$var wire 1 T o_Tx_Done $end
$var wire 1 U o_Tx_Active $end
$var wire 3 V o_SM_Main [2:0] $end
$var wire 1 W fifo_fifo_underflow $end
$var wire 1 X fifo_fifo_threshold $end
$var wire 1 Y fifo_fifo_overflow $end
$var wire 1 Z fifo_fifo_full $end
$var wire 1 [ fifo_fifo_empty $end
$var wire 8 \ fifo_data_out [7:0] $end
$var reg 1 ] aw_en $end
$var reg 6 ^ axi_araddr [5:0] $end
$var reg 1 _ axi_arready $end
$var reg 6 ` axi_awaddr [5:0] $end
$var reg 1 a axi_awready $end
$var reg 2 b axi_bresp [1:0] $end
$var reg 1 c axi_bvalid $end
$var reg 32 d axi_rdata [31:0] $end
$var reg 2 e axi_rresp [1:0] $end
$var reg 1 f axi_rvalid $end
$var reg 1 g axi_wready $end
$var reg 8 h fifo_data_in [7:0] $end
$var reg 1 i fifo_rd $end
$var reg 1 j fifo_wr $end
$var reg 8 k i_Tx_Byte [7:0] $end
$var reg 1 l i_Tx_DV $end
$var reg 32 m reg_data_out [31:0] $end
$var reg 32 n slv_reg0 [31:0] $end
$var reg 32 o slv_reg1 [31:0] $end
$var reg 32 p slv_reg10 [31:0] $end
$var reg 32 q slv_reg11 [31:0] $end
$var reg 32 r slv_reg12 [31:0] $end
$var reg 32 s slv_reg13 [31:0] $end
$var reg 32 t slv_reg14 [31:0] $end
$var reg 32 u slv_reg15 [31:0] $end
$var reg 32 v slv_reg2 [31:0] $end
$var reg 32 w slv_reg3 [31:0] $end
$var reg 32 x slv_reg4 [31:0] $end
$var reg 32 y slv_reg5 [31:0] $end
$var reg 32 z slv_reg6 [31:0] $end
$var reg 32 { slv_reg7 [31:0] $end
$var reg 32 | slv_reg8 [31:0] $end
$var reg 32 } slv_reg9 [31:0] $end
$var reg 8 ~ uart_read_data [7:0] $end
$var reg 1 !" uart_read_en $end
$var reg 1 "" uart_read_finished $end
$var reg 1 #" uart_reading $end
$var reg 8 $" uart_write_count [7:0] $end
$var reg 8 %" uart_write_data [7:0] $end
$var reg 1 &" uart_write_en $end
$var reg 1 '" uart_write_finished $end
$var reg 1 (" uart_writing $end
$var integer 32 )" byte_index [31:0] $end
$scope module fifo_mem_inst $end
$var wire 1 A clk $end
$var wire 8 *" data_in [7:0] $end
$var wire 1 i rd $end
$var wire 1 6 rst_n $end
$var wire 1 j wr $end
$var wire 5 +" wptr [4:0] $end
$var wire 5 ," rptr [4:0] $end
$var wire 1 -" fifo_we $end
$var wire 1 W fifo_underflow $end
$var wire 1 X fifo_threshold $end
$var wire 1 ." fifo_rd $end
$var wire 1 Y fifo_overflow $end
$var wire 1 Z fifo_full $end
$var wire 1 [ fifo_empty $end
$var wire 8 /" data_out [7:0] $end
$scope module top1 $end
$var wire 1 A clk $end
$var wire 1 -" fifo_we $end
$var wire 1 6 rst_n $end
$var wire 1 j wr $end
$var wire 1 Z fifo_full $end
$var reg 5 0" wptr [4:0] $end
$upscope $end
$scope module top2 $end
$var wire 1 A clk $end
$var wire 1 ." fifo_rd $end
$var wire 1 i rd $end
$var wire 1 6 rst_n $end
$var wire 1 [ fifo_empty $end
$var reg 5 1" rptr [4:0] $end
$upscope $end
$scope module top3 $end
$var wire 1 A clk $end
$var wire 8 2" data_in [7:0] $end
$var wire 8 3" data_out [7:0] $end
$var wire 1 -" fifo_we $end
$var wire 5 4" rptr [4:0] $end
$var wire 5 5" wptr [4:0] $end
$upscope $end
$scope module top4 $end
$var wire 1 A clk $end
$var wire 1 6" fbit_comp $end
$var wire 1 ." fifo_rd $end
$var wire 1 -" fifo_we $end
$var wire 1 7" overflow_set $end
$var wire 1 i rd $end
$var wire 5 8" rptr [4:0] $end
$var wire 1 6 rst_n $end
$var wire 1 9" underflow_set $end
$var wire 5 :" wptr [4:0] $end
$var wire 1 j wr $end
$var wire 5 ;" pointer_result [4:0] $end
$var wire 1 <" pointer_equal $end
$var reg 1 [ fifo_empty $end
$var reg 1 Z fifo_full $end
$var reg 1 Y fifo_overflow $end
$var reg 1 X fifo_threshold $end
$var reg 1 W fifo_underflow $end
$upscope $end
$upscope $end
$scope module uart_tx_inst $end
$var wire 1 A i_Clock $end
$var wire 8 =" i_Tx_Byte [7:0] $end
$var wire 1 l i_Tx_DV $end
$var wire 3 >" o_SM_Main [2:0] $end
$var wire 1 T o_Tx_Done $end
$var wire 1 U o_Tx_Active $end
$var reg 1 S o_Tx_Serial $end
$var reg 3 ?" r_Bit_Index [2:0] $end
$var reg 16 @" r_Clock_Count [15:0] $end
$var reg 3 A" r_SM_Main [2:0] $end
$var reg 1 U r_Tx_Active $end
$var reg 8 B" r_Tx_Data [7:0] $end
$var reg 1 T r_Tx_Done $end
$var reg 1 # uart_clk_edge $end
$upscope $end
$upscope $end
$scope task init_all_defaults $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 B"
b0 A"
b0 @"
b0 ?"
b0 >"
bx ="
x<"
bx ;"
bx :"
x9"
bx 8"
x7"
x6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
x."
x-"
bx ,"
bx +"
bx *"
bx )"
x("
x'"
x&"
bx %"
bx $"
x#"
x""
x!"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
xl
bx k
xj
xi
bx h
xg
xf
bx e
bx d
xc
bx b
xa
bx `
x_
bx ^
x]
bx \
x[
xZ
xY
xX
xW
b0 V
0U
0T
xS
0R
0Q
bx P
bx O
xN
xM
xL
bx K
b0 J
b0 I
bx H
bx G
bx F
b0 E
b0 D
b0 C
b0 B
0A
0@
b0 ?
b0 >
0=
0<
0;
b0 :
b0 9
08
b0 7
16
b0 5
x4
x3
bx 2
x1
bx 0
bx /
x.
x-
0,
0+
x*
bx )
bx (
x'
x&
x%
b0 $
x#
x"
z!
$end
#5000
0#
1"
1*
1S
03
0a
0-
0g
04
0_
1A
#10000
0A
#15000
1A
#20000
0A
#25000
1A
#30000
0A
#35000
1A
#40000
0."
1[
07"
1<"
0Z
06"
0X
b0 ;"
b0 +"
b0 0"
b0 5"
b0 :"
b0 ,"
b0 1"
b0 4"
b0 8"
0Y
0W
0A
06
#45000
b0 m
0-"
b0 `
1]
b0 )
b0 O
b0 $"
0'
0&"
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 o
b0 n
b0 2
b0 F
b0 b
01
0c
b0 ^
b0 h
b0 *"
b0 2"
0j
0&
0'"
0%
0("
b0 /
b0 H
b0 e
0.
0f
b0 0
b0 G
b0 d
1A
#50000
0A
#55000
1A
#60000
0A
