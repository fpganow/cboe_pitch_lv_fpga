@startuml 04_insert_order_state
hide empty description

title Insert Order State Machine

label InsertOrder[
{{
    title Parameters
    state "Parameters" as parameters
        parameters: Scratch.FirstCall
        parameters: OrderBook.Command.OrderId
}}

{{
    title State Variables Used
    state "Variables" as variables
        variables: **[filter.states]** filter.state
        variables: [u32] Scratch.I
        variables: [bool] Scratch.JustWrite
        variables: [u32] number.of.orders
        variables: Memory.Command.Read Order Request
        variables: Memory.Command.Read Order Address
        variables: Memory.Command.Write Order Request
        variables: Memory.Command.Write Order Address
        variables: Memory.Command.order.slot.OrderId
        variables: Memory.Command.order.slot.Quantity
}}

{{
    hide empty description

[*] --> insert_order

state "Insert Order" as insert_order

insert_order --> first_call: Scratch.FirstCall == True

state "First Call" as first_call

' Request 1st Order from Memory
state "Existing Orders > 0" as existing_orders_gt_0
    existing_orders_gt_0: filter.state = Insert
    existing_orders_gt_0: Scratch.I = 0
    existing_orders_gt_0: Scratch.FirstCall = False
    existing_orders_gt_0: Scratch.JustWrite = False
    existing_orders_gt_0: Memory.Command.Read Order Request = True
    existing_orders_gt_0: Memory.Command.Read Order Address = 0
' Write Order to Slot 0
state "Existing Orders == 0" as existing_orders_eg_0
    existing_orders_eg_0: filter.state = Wait.for.Command
    existing_orders_eg_0: number.of.orders = 1
    existing_orders_gt_0: Memory.Command.Write Order Request = True
    existing_orders_eg_0: Memory.Command.Write Order Address = 0
    existing_orders_eg_0: Memory.Command.order.slot.OrderId = OrderBook.Command.OrderId
    existing_orders_eg_0: Memory.Command.order.slot.Quantity = OrderBook.Command.Quantity

first_call --> existing_orders_gt_0: Existing Orders
first_call --> existing_orders_eg_0: No Existing Orders
'existing_orders_gt_0 --> insert_order ' Leaf
existing_orders_eg_0 --> [*]

insert_order --> check_memory: Scratch.FirstCall == False

state "Check Memory" as check_memory: Is 'Memory.Command.Read Order Valid' True?

state "Clear Reads" as clear_reads: filter.state = Insert
state "Clear Reads" as clear_reads: Memory.Command.Read Order Request = False
state "Check Just Write" as check_just_write: Is 'Scratch.Just Write' True?

state "Just Write" as just_write
    just_write: filter.state = Wait.for.Command
    just_write: number.of.orders += 1
    just_write: Memory.Command.Write Order Request = True
    just_write: Memory.Command.Write Order Address = number.of.orders
    just_write: Memory.Command.order.slot.OrderId = OrderBook.Command.OrderId
    just_write: Memory.Command.order.slot.Quantity = OrderBook.Command.Quantity

check_memory --> clear_reads: Memory is not Ready
'clear_reads --> insert_order ' Leaf
check_memory -> check_just_write: Memory is Ready

check_just_write --> just_write: Scratch.JustWrite == True
just_write --> [*]
check_just_write --> check_match: Scratch.JustWrite == False

' Check Match
state "Check Match" as check_match: Does Order belong in 'Scratch.I' slot?

state "Write Order" as write_order
state "Append Larger" as append_larger: Write.Addr = Read.Addr
    append_larger: filter.state = Insert
    append_larger: Scratch.Just Write = True
    append_larger: Memory.Command.Write Order Request = True
    append_larger: Memory.Command.Write Address = Scratch.I
    append_larger: Memory.Command.order.slot.OrderId = OrderBook.Command.OrderId
    append_larger: Memory.Command.order.slot.Quantity = OrderBook.Command.Quantity

state "Write and Read" as write_and_read
    write_and_read: filter.state = Insert
    write_and_read: Scratch.Just Write = False
    write_and_read: Scartch.I += 1
    write_and_read: Memory.Command.Write Order Request = True
    write_and_read: Memory.Command.Write Address = Scratch.I
    write_and_read: Memory.Command.order.slot.OrderId = OrderBook.Command.OrderId
    write_and_read: Memory.Command.order.slot.Quantity = OrderBook.Command.Quantity
    write_and_read: Memory.Command.Read Request = True
    write_and_read: Memory.Command.Read Address = Scratch.I + 1
    write_and_read: OrderBook.Command.OrderId = Memory.Command.order.slot.OrderId
    write_and_read: OrderBook.Command.Quantity = Memory.Command.order.slot.Quantity

state "Read Next or Append" as read_next
state "Append New" as append_new
    append_new: filter.state = Wait.for.Command
    append_new: number.of.orders += 1
    append_new: Memory.Command.Write Order Request = True
    append_new: Memory.Command.Write Address = Scratch.I + 1
    append_new: Memory.Command.order.slot.OrderId = OrderBook.Command.OrderId
    append_new: Memory.Command.order.slot.Quantity = OrderBook.Command.Quantity

state "Request Next" as request_next
    request_next: filter.state = Insert
    request_next: Read.Addr = Read.Addr + 1
    request_next: Memory.Command.Read Request = True
    request_next: Memory.Command.Read Address = Scratch.I + 1

' Check Match
check_match --> write_order: Order Matches
write_order --> write_and_read: Not at end of List
' write_and_read --> insert_order ' Leaf
write_order --> append_larger: At end of list
' append_larger --> insert_order ' Leaf

check_match --> read_next: Order Does not Match

read_next --> append_new: No More Elements
read_next --> request_next: More Elements to Read

'request_next --> insert_order ' Leaf

append_new --> [*]

}}
]

@enduml